name: Check firmware update

on:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * *"
  push:

jobs:
  update:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # ODM OMC
          - model: "SM-A525F"
            region: "INS"
          # OJM OMC
          - model: "SM-A525F"
            region: "EGY"
          # OLE OMC
          - model: "SM-A525F"
            region: "XID"
          # OLM OMC
          - model: "SM-A525F"
            region: "XSA"
          # OWA OMC
          - model: "SM-A525M"
            region: "CDR"
          # OWM OMC
          - model: "SM-A525M"
            region: "TGP"
          # OWO OMC
          - model: "SM-A525M"
            region: "PEO"
          # OXM OMC
          - model: "SM-A525F"
            region: "SER"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Compare latest version with current version
        id: check
        run: |
          need_update=0
          latest=`curl --retry 5 --retry-delay 5 http://fota-cloud-dn.ospserver.net/firmware/${{ matrix.region }}/${{ matrix.model }}/version.xml | grep latest | sed 's/^[^>]*>//' | sed 's/<.*//'`
          latest_short=`echo $latest | cut -d'/' -f1`
          latest_csc=`echo $latest | cut -d'/' -f2`
          latest_modem=`echo $latest | cut -d'/' -f3`
          current=`cat current.${{ matrix.model }}_${{ matrix.region }}` || need_update=1
          [[ $latest != $current ]] && need_update=1
          echo ::set-output name=latest_version::$latest
          echo ::set-output name=latest_shortversion::$latest_short
          echo ::set-output name=latest_cscversion::$latest_csc
          echo ::set-output name=latest_modemversion::$latest_modem
          echo ::set-output name=need_update::$need_update

      - name: Install dependencies
        if: steps.check.outputs.need_update == 1
        run: |
          sudo apt-get update
          sudo apt-get install -y liblz4-tool zip simg2img f2fs-tools
          sudo wget -O /usr/bin/samfirm https://github.com/jesec/SamFirm.NET/releases/latest/download/linux-x64 && sudo chmod +x /usr/bin/samfirm
          sudo wget -O /usr/bin/lpunpack https://corsica.nu/lpunpack && sudo chmod +x /usr/bin/lpunpack

      - name: Fetch firmware
        if: steps.check.outputs.need_update == 1
        run: samfirm -m ${{ matrix.model }} -r ${{ matrix.region }}

      - name: Get path of files
        if: steps.check.outputs.need_update == 1
        id: files
        run: |
          echo ::set-output name=ap::`find -name AP*`
          echo ::set-output name=bl::`find -name BL*`
          echo ::set-output name=cp::`find -name CP*`
          echo ::set-output name=csc::`find -name CSC*`
          echo ::set-output name=home_csc::`find -name HOME_CSC*`

      - name: Check downloaded firmware version
        if: steps.check.outputs.need_update == 1
        run: |
          version_short=`echo ${{ steps.files.outputs.ap }} | cut -d'_' -f3`
          version_csc=`echo ${{ steps.files.outputs.csc }} | cut -d'_' -f4`
          version_modem=`echo ${{ steps.files.outputs.cp }} | cut -d'_' -f3`
          [[ $version_short == ${{ steps.check.outputs.latest_shortversion }} ]]
          [[ $version_csc == ${{ steps.check.outputs.latest_cscversion }} ]]
          [[ $version_modem == ${{ steps.check.outputs.latest_modemversion }} ]]
          echo PDA version: $version_short > versions.txt
          echo CSC version: $version_csc >> versions.txt
          echo Modem version: $version_modem >> versions.txt

      - name: Cleanup space
        if: steps.check.outputs.need_update == 1
        run: |
          sudo apt-get remove --purge -y "php*" "dotnet*" "mysql*" "nodejs*" "clang*" "google*"
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /usr/local

      - name: Extract kernel images
        if: steps.check.outputs.need_update == 1
        env:
          FILES: boot.img.lz4 dtbo.img.lz4 vbmeta.img.lz4
        run: |
          for file in $FILES; do tar xvf ${{ steps.files.outputs.ap }} ${file}; done
          tar cvf ${{ steps.check.outputs.latest_shortversion }}_kernel.tar *.lz4
          rm *.lz4

      - name: Extract PIT file
        if: steps.check.outputs.need_update == 1
        id: pit
        run: |
          tar --wildcards --exclude='*/*' -xvf ${{ steps.files.outputs.csc }} '*.pit'
          echo ::set-output name=file::`find -name *.pit`

      - name: Generate patched vbmeta
        if: steps.check.outputs.need_update == 1
        run: |
          tar xvf ${{ steps.files.outputs.ap }} vbmeta.img.lz4
          lz4 -d vbmeta.img.lz4 vbmeta.img
          rm vbmeta.img.lz4
          printf "$(printf '\\x%02X' 3)" | dd of="vbmeta.img" bs=1 seek=123 count=1 conv=notrunc &> /dev/null
          tar cvf ${{ steps.check.outputs.latest_shortversion }}_patched_vbmeta.tar vbmeta.img
          rm vbmeta.img

      - name: Extract vendor partition
        if: steps.check.outputs.need_update == 1
        run: |
          tar xvf ${{ steps.files.outputs.ap }} super.img.lz4
          lz4 -d super.img.lz4 super.img
          rm super.img.lz4
          simg2img super.img super_raw.img
          rm super.img
          mv super_raw.img super.img
          lpunpack --partition=vendor super.img
          rm super.img
          [[ -e vendor.img.ext4 ]] && mv vendor.img.ext4 vendor.img
          [[ -e vendor.img ]] && zip ${{ steps.check.outputs.latest_shortversion }}_vendor.zip vendor.img
          [[ -e vendor.img ]] && rm vendor.img

      - name: Update current version
        if: steps.check.outputs.need_update == 1
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git pull origin ${{github.ref}} --ff-only
          echo ${{ steps.check.outputs.latest_version }} > current.${{ matrix.model }}_${{ matrix.region }}
          git add current.${{ matrix.model }}_${{ matrix.region }}
          git commit -m "${{ matrix.model }}: ${{ steps.check.outputs.latest_version }}"
          git tag "${{ steps.check.outputs.latest_shortversion }}_${{ matrix.region }}"

      - name: Push changes to repo
        if: steps.check.outputs.need_update == 1
        uses: ad-m/github-push-action@master
        with:
          tags: true
          github_token: ${{ secrets.TOKEN }}

      - name: Upload release assets
        if: steps.check.outputs.need_update == 1
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          body_path: versions.txt
          tag_name: "${{ steps.check.outputs.latest_shortversion }}_${{ matrix.region }}"
          name: "${{ steps.check.outputs.latest_shortversion }} - ${{ matrix.model }} - ${{ matrix.region }}"
          files: |
            ${{ steps.files.outputs.bl }}
            ${{ steps.files.outputs.cp }}
            ${{ steps.files.outputs.home_csc }}
            ${{ steps.check.outputs.latest_shortversion }}_kernel.tar
            ${{ steps.pit.outputs.file }}
            ${{ steps.check.outputs.latest_shortversion }}_patched_vbmeta.tar
            ${{ steps.check.outputs.latest_shortversion }}_vendor.zip
